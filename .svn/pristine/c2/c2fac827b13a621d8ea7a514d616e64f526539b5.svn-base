package com.kimtajo.guideMatching;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.widget.ImageView;

import java.lang.ref.WeakReference;

class ImageDownloader{
	
	public void download(String url, ImageView imageView, Context context)
	{
		if(cancelPotentialDownload(url, imageView))
		{
			BitmapDownloaderTask task = new BitmapDownloaderTask(imageView, context);
			DownloadedDrawable downloadedDrawable = new DownloadedDrawable(task);
			imageView.setImageDrawable(downloadedDrawable);
			task.execute(url);
		}
	}
	
	static class DownloadedDrawable extends ColorDrawable {
	    private final WeakReference<BitmapDownloaderTask> bitmapDownloaderTaskReference;

	    public DownloadedDrawable(BitmapDownloaderTask bitmapDownloaderTask) {
	        super(Color.WHITE);
	        bitmapDownloaderTaskReference =
	            new WeakReference<BitmapDownloaderTask>(bitmapDownloaderTask);
	    }

	    public BitmapDownloaderTask getBitmapDownloaderTask() {
	        return bitmapDownloaderTaskReference.get();
	    }
	}

	private static boolean cancelPotentialDownload(String url, ImageView imageView) {
	    BitmapDownloaderTask bitmapDownloaderTask = getBitmapDownloaderTask(imageView);

	    if (bitmapDownloaderTask != null) {
	        String bitmapUrl = bitmapDownloaderTask.url;
	        if ((bitmapUrl == null) || (!bitmapUrl.equals(url))) {
	            bitmapDownloaderTask.cancel(true);
	        } else {
	            // The same URL is already being downloaded.
	            return false;
	        }
	    }
	    return true;
	}

	private static BitmapDownloaderTask getBitmapDownloaderTask(ImageView imageView) {
	    if (imageView != null) {
	        Drawable drawable = imageView.getDrawable();
	        if (drawable instanceof DownloadedDrawable) {
	            DownloadedDrawable downloadedDrawable = (DownloadedDrawable)drawable;
	            return downloadedDrawable.getBitmapDownloaderTask();
	        }
	    }
	    return null;
	}

}

/**
 * */
class BitmapDownloaderTask extends AsyncTask<String, Void, Bitmap>
{
	String url;
	private final WeakReference<ImageView> imageViewReference;
	private Context mContext;
	public BitmapDownloaderTask(ImageView imageView, Context context)
	{
		imageViewReference = new WeakReference<ImageView>(imageView);
		mContext = context;
	}
	

    @Override
    // Once the image is downloaded, associates it to the imageView
    protected void onPostExecute(Bitmap bitmap) {
        if (isCancelled()) {
            bitmap = null;
        }

        if (imageViewReference != null) {
            ImageView imageView = imageViewReference.get();
            if (imageView != null) {
                imageView.setImageBitmap(bitmap);
            }
        }
    }


	@Override
	protected Bitmap doInBackground(String... params) {
		
		
		return drawimg(params[0]);
	}

	public Bitmap drawimg(String url)
	{
		String path = MyBitmap.getRealImagePath(mContext, url);
		if(path.length()<=0){
			Resources res = mContext.getResources();
			
			Bitmap bit = BitmapFactory.decodeResource(res, R.drawable.img_photo_noimg);
			return bit;			
		}
		else{
			BitmapFactory.Options op = new BitmapFactory.Options();
			op.inSampleSize = 8;
			Bitmap bit = BitmapFactory.decodeFile(path, op);
			return bit;
			//imgview.setImageBitmap(MyBitmap.resizeBitmapImage(bit, 150));
		}
	}
}

